We have an issues with throwing errors due to validation. This is due to the behavior of the express-validator library. If validation fails in a validation chain, express-validator doesn't throw an error of type Error, instead it creates a an array of errors. Each of these errors is a JavaScript object (hence, referred to as ERR object). However, we want our desired program flow to be such that whenever any error is thrown, then it should be caught by the global error handler. In this case, it isn't possible for the global error handler to catch these ERRS since they aren't of type Error. A few ways of dealing with the situation are given below:

1) If we are using only a single validator in the validation chain, then we can extract the "msg" key from ERR and create a CustomError object with it along with an HTTP error code. However, the ERR object contains a lot of information. This information will not be shown in the CustomError. We could send the ERR as a JSON response to the user and then do "return next(CustomError())" as a compromise. However, this will be against the desired program flow.

2) If the validation chain contains more than one function, then the strategy outlined in 1) may not work in a situtation where more than 1 function in the validation chain throws an error. While an array of CustomError objects with the "msg" keys from each of the ERR objects can be created, when that array is passed to next(), then it will not be able to read the CustomError objects in it and will throw a default HTTP 500 Internal Server Error. We could create a compromise by returning the array of ERR objects as a JSON response to the user and also creating a CustomError of HTTP 400 and throwing that as "return next(CustomError())".

3) We could use the validator.js library and create validation chain functions by using the validator functions directly. This way we can define CustomError for each type of validation failure.

